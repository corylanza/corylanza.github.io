@page "/outlet-lang"
@inject IJSRuntime JSRuntime;
@using Microsoft.AspNetCore.Components.Rendering

@{
    Dictionary<string, RenderFragment> Examples = new Dictionary<string, RenderFragment>
    {
        {
            "Types", __builder =>
            {
                <OutletEditor ID="editor" @ref="Editor">

                </OutletEditor>
            }
        },
        {
            "Object Oriented", __builder =>
            {
                <OutletEditor ID="editor" @ref="Editor">
class Person {

    string Name = "";

    Person(string name) {
        Name = name;
    }

    void Speak() {
        console.print("My name is " + Name);
    }
}

Person("Cory").Speak();
                </OutletEditor>
            }
        },
        {
            "Functions", __builder =>
            {
                <OutletEditor ID="editor" @ref="Editor">
// inline
bool equal(int a, int b) => a == b;
// traditional (and demonstration of mutual recursion)
bool even(int n) {
  if(n == 0) return true;
  return odd(n-1);
}
bool odd(int n) {
  if(n == 0) return false;
  return even(n-1);
}
                </OutletEditor>
            }
        },
        {
            "Syntax", __builder =>
            {
                <OutletEditor ID="editor" @ref="Editor">
int a = 5;
// Array and Tuple types
int[] array = [3,4,5,6,7];
(int, string) tuple = (3, "tuple");
// Type constructions can be combined
(int, string)[] arraytuple = [(4, "this is a tuple"), (54, "inside of an array")];
int[][] multidimensional;
// Function types
(int, int) => bool = equal;
// Type Nicknames
type numbertuple = (int, int);
                </OutletEditor>
            }
        },
        {
            "FizzBuzz", __builder =>
            {
                <OutletEditor ID="editor" @ref="Editor">
for(int i in 0...100) {
	if(i % 3 == 0 && i % 5 == 0) console.print("FizzBuzz");
	else if(i % 3 == 0) console.print("Fizz");
	else if(i % 5 == 0) console.print("Buzz");
	else console.print(i);
}
                </OutletEditor>
            }
        },
        {
            "Local and Anonymous Functions", __builder =>
            {
                <OutletEditor ID="editor" @ref="Editor">
(string) => int MakePoint(int x, int y) {
	int closure(string method) {
		if(method == "x") return x;
		else return y;
	} return closure;
}
(string) => int point = MakePoint(1, 2);
console.print(point("x"));
console.print(point("y"));
(string) => int point2 = MakePoint(3, 4);
console.print(point2("x"));
console.print(point2("y"));
console.print(point("x"));
console.print(point("y"));
                </OutletEditor>
            }
        },
        {
            "Placeholder", __builder =>
            {
                <OutletEditor ID="editor" @ref="Editor">

                </OutletEditor>
            }
        },
        {
            "Another Placeholder", __builder =>
            {
                <OutletEditor ID="editor" @ref="Editor">

                </OutletEditor>
            }
        },
    };
}

<div class="container">
    <h1 class="text-white text-center">Outlet Programming Language Demo</h1>
    <div class="row justify-content-end my-3">
        <div class="col-6 col-md-2">
            <button class="btn btn-light w-100" @onclick="RunOutlet">
                <span class="material-icons" aria-hidden="false">play_circle</span>
                <span class="align-top">Run</span>
            </button>
        </div>
        <div class="col-6 col-md-2">
            <button class="btn btn-light w-100" @onclick="CheckOutlet">
                <span class="material-icons @CheckCssClass" aria-hidden="false">check_circle</span>
                <span class="align-top">Check</span>
            </button>
        </div>
        @if (ShowOutput)
        {
            <div class="col-6 col-md-2 order-first">
                <button class="btn btn-light w-100" @onclick="() => ShowOutput = false">
                    <span class="material-icons" aria-hidden="false">edit_note</span>
                    <span class="align-top">Edit</span>
                </button>
            </div>
        }
    </div>

    <div class="row">
        <div class="col-12 col-md-4 mb-4">
            <div class="list-group">
                @foreach(var exampleTitle in Examples.Keys)
                {
                    bool active = CurrentExample == exampleTitle;
                    <button type="button"
                        class="list-group-item list-group-item-action @(active ? "active" : string.Empty)"
                        aria-current="@active.ToString().ToLower()"
                        @onclick="_ => {
                            CurrentExample = exampleTitle;
                            ShowOutput = false;
                        }">@exampleTitle</button>
                }
            </div>
        </div>
        <div class="col-12 col-md-8">
            @if (ShowOutput)
            {
                <div class="p-3" style="background-color: #282a36; min-height: 30vh;">
                    <p class="text-white">@Output</p>
                    <p class="text-info">@ReturnValue</p>
                </div>
            }
            else
            {
                var exampleRenderFragment = (string.IsNullOrEmpty(CurrentExample) ? Examples.First() : Examples.First(x => x.Key == CurrentExample)).Value;
                @exampleRenderFragment;
            }
        </div>
        @foreach (var error in Errors)
        {
            <div class="col-12 mt-2">
                <div class="alert alert-danger" role="alert">
                    @error
                </div>
            </div>
        }
    </div>
</div>